package com.desafio.apirest.resources;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RestController;


import com.desafio.apirest.models.Escola;

import com.desafio.apirest.repository.EnderecoRepository;
import com.desafio.apirest.repository.EscolaRepository;
import com.desafio.apirest.response.ResponseHandler;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


import java.util.List;

@RestController
@RequestMapping(value = "/api")
@Api(value = "API REST Desafio")
@CrossOrigin(origins = "*")
public class EscolaResource {

	@Autowired
	EscolaRepository escolaRepository;
	EnderecoRepository enderecoRepository;

	// endpoint para buscar todas as escolas cadastradas no banco de dados, utilizar @GET na requisição
	@GetMapping("/escolas")
	@ApiOperation(value = "Retorna uma lista de escolas")
	public ResponseEntity<Object> getAll() {
		if (escolaRepository.count() != 0) {
			List<Escola> result = escolaRepository.findAll();
			return ResponseHandler.generateResponse("Dados encontrados com sucesso", HttpStatus.OK, result);
		} else {
			return ResponseHandler.generateResponse("Não existem escolas cadastradas", HttpStatus.OK, null);
		}

	}

	// endpoint para buscar escolas por id, utilizar @GET na requisição
	@GetMapping("/escola/{id}")
	@ApiOperation(value = "Retorna uma escola filtrada por id")
	public ResponseEntity<Object> getById(@PathVariable(value = "id") long id) {
		if (escolaRepository.existsById(id)) {
			Escola result = escolaRepository.findById(id);
			return ResponseHandler.generateResponse("Escola encontrada com sucesso!", HttpStatus.OK, result);
		} else {
			return ResponseHandler.generateResponse("Não existe escola cadastrada com esse ID", HttpStatus.OK, null);
		}

	}

	// endpoint para criar escola, utilizar @POST na requisição e não passar ID no json por já ser autogenerated
	@PostMapping("/escola/create")
	@ApiOperation(value = "Cria uma nova turma via json")
	public ResponseEntity<Object> create(@RequestBody Escola escola) {
		Escola result = escolaRepository.save(escola);
		if (result.getNome() != null && result.getEndereco().getBairro() != null
				&& result.getEndereco().getCidade() != null && result.getEndereco().getComplemento() != null
				&& result.getEndereco().getEstado() != null && result.getEndereco().getEstado() != null
				&& result.getEndereco().getLogradouro() != null) {
			return ResponseHandler.generateResponse("Escola cadastrada com sucesso!", HttpStatus.OK, result);
		} else {
			return ResponseHandler.generateResponse("Todos os campos precisam ser enviados pelo json", HttpStatus.OK,
					result);
		}
	}

	// endpoint para deletar escola, utilizar @DELETE na requisição
	@DeleteMapping("/escola/delete/{id}")
	@ApiOperation(value = "Deleta uma turma via id")
	public ResponseEntity<Object> deleteById(@PathVariable("id") long id) {
		if (escolaRepository.existsById(id)) {
			Escola result = escolaRepository.deleteById(id);
			return ResponseHandler.generateResponse("Escola excluída com sucesso!", HttpStatus.OK, result);
		} else {
			return ResponseHandler.generateResponse("Não existe escola cadastrada com esse ID", HttpStatus.OK, null);
		}
	}

	// endpoint para atualizar escola, utilizar @PUT na requisição
	@PutMapping("/escola/update")
	@ApiOperation(value = "Atualiza uma escola via json")
	public ResponseEntity<Object> update(@RequestBody Escola escola) {
		Escola result = escolaRepository.save(escola);
		return ResponseHandler.generateResponse("Escola atualizada com sucesso!", HttpStatus.OK, result);
	}

}
